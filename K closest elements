class Solution {
    int[] printKClosest(int[] arr, int n, int k, int x) {
        // code here
        
        TreeMap<Integer,PriorityQueue<Integer>> map = new TreeMap<>();
        for(int i : arr){
            int diff = Math.abs(i-x);
            if(i != x){
            if(map.containsKey(diff)){
                PriorityQueue<Integer> pq = map.get(diff);
                pq.add(i);
                map.put(diff,pq);
            }
            else{
                PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
                pq.add(i);
                map.put(diff,pq);
                
            }
            }
        }
        int ans[] = new int[k];
        int j = 0;
        for(Map.Entry<Integer,PriorityQueue<Integer>> i : map.entrySet()){
            while(!i.getValue().isEmpty()){
                ans[j++] = i.getValue().remove();
                if(j == k){
                    break;
                }
            }
            if(j == k){
                break;
            }
        }
        
        return ans;
    }
}
